// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/third-manager/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/third-manager/pkg/db/ent/contact"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/emailtemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/notiftemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/smstemplate"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// NotifTemplate is the client for interacting with the NotifTemplate builders.
	NotifTemplate *NotifTemplateClient
	// SMSTemplate is the client for interacting with the SMSTemplate builders.
	SMSTemplate *SMSTemplateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Contact = NewContactClient(c.config)
	c.EmailTemplate = NewEmailTemplateClient(c.config)
	c.NotifTemplate = NewNotifTemplateClient(c.config)
	c.SMSTemplate = NewSMSTemplateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Contact:       NewContactClient(cfg),
		EmailTemplate: NewEmailTemplateClient(cfg),
		NotifTemplate: NewNotifTemplateClient(cfg),
		SMSTemplate:   NewSMSTemplateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Contact:       NewContactClient(cfg),
		EmailTemplate: NewEmailTemplateClient(cfg),
		NotifTemplate: NewNotifTemplateClient(cfg),
		SMSTemplate:   NewSMSTemplateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Contact.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Contact.Use(hooks...)
	c.EmailTemplate.Use(hooks...)
	c.NotifTemplate.Use(hooks...)
	c.SMSTemplate.Use(hooks...)
}

// ContactClient is a client for the Contact schema.
type ContactClient struct {
	config
}

// NewContactClient returns a client for the Contact from the given config.
func NewContactClient(c config) *ContactClient {
	return &ContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contact.Hooks(f(g(h())))`.
func (c *ContactClient) Use(hooks ...Hook) {
	c.hooks.Contact = append(c.hooks.Contact, hooks...)
}

// Create returns a builder for creating a Contact entity.
func (c *ContactClient) Create() *ContactCreate {
	mutation := newContactMutation(c.config, OpCreate)
	return &ContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contact entities.
func (c *ContactClient) CreateBulk(builders ...*ContactCreate) *ContactCreateBulk {
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contact.
func (c *ContactClient) Update() *ContactUpdate {
	mutation := newContactMutation(c.config, OpUpdate)
	return &ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactClient) UpdateOne(co *Contact) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContact(co))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactClient) UpdateOneID(id uuid.UUID) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContactID(id))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contact.
func (c *ContactClient) Delete() *ContactDelete {
	mutation := newContactMutation(c.config, OpDelete)
	return &ContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactClient) DeleteOne(co *Contact) *ContactDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ContactClient) DeleteOneID(id uuid.UUID) *ContactDeleteOne {
	builder := c.Delete().Where(contact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactDeleteOne{builder}
}

// Query returns a query builder for Contact.
func (c *ContactClient) Query() *ContactQuery {
	return &ContactQuery{
		config: c.config,
	}
}

// Get returns a Contact entity by its id.
func (c *ContactClient) Get(ctx context.Context, id uuid.UUID) (*Contact, error) {
	return c.Query().Where(contact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactClient) GetX(ctx context.Context, id uuid.UUID) *Contact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContactClient) Hooks() []Hook {
	hooks := c.hooks.Contact
	return append(hooks[:len(hooks):len(hooks)], contact.Hooks[:]...)
}

// EmailTemplateClient is a client for the EmailTemplate schema.
type EmailTemplateClient struct {
	config
}

// NewEmailTemplateClient returns a client for the EmailTemplate from the given config.
func NewEmailTemplateClient(c config) *EmailTemplateClient {
	return &EmailTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailtemplate.Hooks(f(g(h())))`.
func (c *EmailTemplateClient) Use(hooks ...Hook) {
	c.hooks.EmailTemplate = append(c.hooks.EmailTemplate, hooks...)
}

// Create returns a builder for creating a EmailTemplate entity.
func (c *EmailTemplateClient) Create() *EmailTemplateCreate {
	mutation := newEmailTemplateMutation(c.config, OpCreate)
	return &EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailTemplate entities.
func (c *EmailTemplateClient) CreateBulk(builders ...*EmailTemplateCreate) *EmailTemplateCreateBulk {
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailTemplate.
func (c *EmailTemplateClient) Update() *EmailTemplateUpdate {
	mutation := newEmailTemplateMutation(c.config, OpUpdate)
	return &EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailTemplateClient) UpdateOne(et *EmailTemplate) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplate(et))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailTemplateClient) UpdateOneID(id uuid.UUID) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplateID(id))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailTemplate.
func (c *EmailTemplateClient) Delete() *EmailTemplateDelete {
	mutation := newEmailTemplateMutation(c.config, OpDelete)
	return &EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailTemplateClient) DeleteOne(et *EmailTemplate) *EmailTemplateDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *EmailTemplateClient) DeleteOneID(id uuid.UUID) *EmailTemplateDeleteOne {
	builder := c.Delete().Where(emailtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailTemplateDeleteOne{builder}
}

// Query returns a query builder for EmailTemplate.
func (c *EmailTemplateClient) Query() *EmailTemplateQuery {
	return &EmailTemplateQuery{
		config: c.config,
	}
}

// Get returns a EmailTemplate entity by its id.
func (c *EmailTemplateClient) Get(ctx context.Context, id uuid.UUID) (*EmailTemplate, error) {
	return c.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailTemplateClient) GetX(ctx context.Context, id uuid.UUID) *EmailTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmailTemplateClient) Hooks() []Hook {
	hooks := c.hooks.EmailTemplate
	return append(hooks[:len(hooks):len(hooks)], emailtemplate.Hooks[:]...)
}

// NotifTemplateClient is a client for the NotifTemplate schema.
type NotifTemplateClient struct {
	config
}

// NewNotifTemplateClient returns a client for the NotifTemplate from the given config.
func NewNotifTemplateClient(c config) *NotifTemplateClient {
	return &NotifTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notiftemplate.Hooks(f(g(h())))`.
func (c *NotifTemplateClient) Use(hooks ...Hook) {
	c.hooks.NotifTemplate = append(c.hooks.NotifTemplate, hooks...)
}

// Create returns a builder for creating a NotifTemplate entity.
func (c *NotifTemplateClient) Create() *NotifTemplateCreate {
	mutation := newNotifTemplateMutation(c.config, OpCreate)
	return &NotifTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotifTemplate entities.
func (c *NotifTemplateClient) CreateBulk(builders ...*NotifTemplateCreate) *NotifTemplateCreateBulk {
	return &NotifTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotifTemplate.
func (c *NotifTemplateClient) Update() *NotifTemplateUpdate {
	mutation := newNotifTemplateMutation(c.config, OpUpdate)
	return &NotifTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifTemplateClient) UpdateOne(nt *NotifTemplate) *NotifTemplateUpdateOne {
	mutation := newNotifTemplateMutation(c.config, OpUpdateOne, withNotifTemplate(nt))
	return &NotifTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifTemplateClient) UpdateOneID(id uuid.UUID) *NotifTemplateUpdateOne {
	mutation := newNotifTemplateMutation(c.config, OpUpdateOne, withNotifTemplateID(id))
	return &NotifTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotifTemplate.
func (c *NotifTemplateClient) Delete() *NotifTemplateDelete {
	mutation := newNotifTemplateMutation(c.config, OpDelete)
	return &NotifTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifTemplateClient) DeleteOne(nt *NotifTemplate) *NotifTemplateDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *NotifTemplateClient) DeleteOneID(id uuid.UUID) *NotifTemplateDeleteOne {
	builder := c.Delete().Where(notiftemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifTemplateDeleteOne{builder}
}

// Query returns a query builder for NotifTemplate.
func (c *NotifTemplateClient) Query() *NotifTemplateQuery {
	return &NotifTemplateQuery{
		config: c.config,
	}
}

// Get returns a NotifTemplate entity by its id.
func (c *NotifTemplateClient) Get(ctx context.Context, id uuid.UUID) (*NotifTemplate, error) {
	return c.Query().Where(notiftemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifTemplateClient) GetX(ctx context.Context, id uuid.UUID) *NotifTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifTemplateClient) Hooks() []Hook {
	hooks := c.hooks.NotifTemplate
	return append(hooks[:len(hooks):len(hooks)], notiftemplate.Hooks[:]...)
}

// SMSTemplateClient is a client for the SMSTemplate schema.
type SMSTemplateClient struct {
	config
}

// NewSMSTemplateClient returns a client for the SMSTemplate from the given config.
func NewSMSTemplateClient(c config) *SMSTemplateClient {
	return &SMSTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smstemplate.Hooks(f(g(h())))`.
func (c *SMSTemplateClient) Use(hooks ...Hook) {
	c.hooks.SMSTemplate = append(c.hooks.SMSTemplate, hooks...)
}

// Create returns a builder for creating a SMSTemplate entity.
func (c *SMSTemplateClient) Create() *SMSTemplateCreate {
	mutation := newSMSTemplateMutation(c.config, OpCreate)
	return &SMSTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SMSTemplate entities.
func (c *SMSTemplateClient) CreateBulk(builders ...*SMSTemplateCreate) *SMSTemplateCreateBulk {
	return &SMSTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SMSTemplate.
func (c *SMSTemplateClient) Update() *SMSTemplateUpdate {
	mutation := newSMSTemplateMutation(c.config, OpUpdate)
	return &SMSTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SMSTemplateClient) UpdateOne(st *SMSTemplate) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplate(st))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SMSTemplateClient) UpdateOneID(id uuid.UUID) *SMSTemplateUpdateOne {
	mutation := newSMSTemplateMutation(c.config, OpUpdateOne, withSMSTemplateID(id))
	return &SMSTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SMSTemplate.
func (c *SMSTemplateClient) Delete() *SMSTemplateDelete {
	mutation := newSMSTemplateMutation(c.config, OpDelete)
	return &SMSTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SMSTemplateClient) DeleteOne(st *SMSTemplate) *SMSTemplateDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SMSTemplateClient) DeleteOneID(id uuid.UUID) *SMSTemplateDeleteOne {
	builder := c.Delete().Where(smstemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SMSTemplateDeleteOne{builder}
}

// Query returns a query builder for SMSTemplate.
func (c *SMSTemplateClient) Query() *SMSTemplateQuery {
	return &SMSTemplateQuery{
		config: c.config,
	}
}

// Get returns a SMSTemplate entity by its id.
func (c *SMSTemplateClient) Get(ctx context.Context, id uuid.UUID) (*SMSTemplate, error) {
	return c.Query().Where(smstemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SMSTemplateClient) GetX(ctx context.Context, id uuid.UUID) *SMSTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SMSTemplateClient) Hooks() []Hook {
	hooks := c.hooks.SMSTemplate
	return append(hooks[:len(hooks):len(hooks)], smstemplate.Hooks[:]...)
}
