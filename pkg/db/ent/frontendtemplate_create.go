// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/frontendtemplate"
	"github.com/google/uuid"
)

// FrontendTemplateCreate is the builder for creating a FrontendTemplate entity.
type FrontendTemplateCreate struct {
	config
	mutation *FrontendTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ftc *FrontendTemplateCreate) SetCreatedAt(u uint32) *FrontendTemplateCreate {
	ftc.mutation.SetCreatedAt(u)
	return ftc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableCreatedAt(u *uint32) *FrontendTemplateCreate {
	if u != nil {
		ftc.SetCreatedAt(*u)
	}
	return ftc
}

// SetUpdatedAt sets the "updated_at" field.
func (ftc *FrontendTemplateCreate) SetUpdatedAt(u uint32) *FrontendTemplateCreate {
	ftc.mutation.SetUpdatedAt(u)
	return ftc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableUpdatedAt(u *uint32) *FrontendTemplateCreate {
	if u != nil {
		ftc.SetUpdatedAt(*u)
	}
	return ftc
}

// SetDeletedAt sets the "deleted_at" field.
func (ftc *FrontendTemplateCreate) SetDeletedAt(u uint32) *FrontendTemplateCreate {
	ftc.mutation.SetDeletedAt(u)
	return ftc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableDeletedAt(u *uint32) *FrontendTemplateCreate {
	if u != nil {
		ftc.SetDeletedAt(*u)
	}
	return ftc
}

// SetAppID sets the "app_id" field.
func (ftc *FrontendTemplateCreate) SetAppID(u uuid.UUID) *FrontendTemplateCreate {
	ftc.mutation.SetAppID(u)
	return ftc
}

// SetLangID sets the "lang_id" field.
func (ftc *FrontendTemplateCreate) SetLangID(u uuid.UUID) *FrontendTemplateCreate {
	ftc.mutation.SetLangID(u)
	return ftc
}

// SetUsedFor sets the "used_for" field.
func (ftc *FrontendTemplateCreate) SetUsedFor(s string) *FrontendTemplateCreate {
	ftc.mutation.SetUsedFor(s)
	return ftc
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableUsedFor(s *string) *FrontendTemplateCreate {
	if s != nil {
		ftc.SetUsedFor(*s)
	}
	return ftc
}

// SetTitle sets the "title" field.
func (ftc *FrontendTemplateCreate) SetTitle(s string) *FrontendTemplateCreate {
	ftc.mutation.SetTitle(s)
	return ftc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableTitle(s *string) *FrontendTemplateCreate {
	if s != nil {
		ftc.SetTitle(*s)
	}
	return ftc
}

// SetContent sets the "content" field.
func (ftc *FrontendTemplateCreate) SetContent(s string) *FrontendTemplateCreate {
	ftc.mutation.SetContent(s)
	return ftc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableContent(s *string) *FrontendTemplateCreate {
	if s != nil {
		ftc.SetContent(*s)
	}
	return ftc
}

// SetSender sets the "sender" field.
func (ftc *FrontendTemplateCreate) SetSender(s string) *FrontendTemplateCreate {
	ftc.mutation.SetSender(s)
	return ftc
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableSender(s *string) *FrontendTemplateCreate {
	if s != nil {
		ftc.SetSender(*s)
	}
	return ftc
}

// SetID sets the "id" field.
func (ftc *FrontendTemplateCreate) SetID(u uuid.UUID) *FrontendTemplateCreate {
	ftc.mutation.SetID(u)
	return ftc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ftc *FrontendTemplateCreate) SetNillableID(u *uuid.UUID) *FrontendTemplateCreate {
	if u != nil {
		ftc.SetID(*u)
	}
	return ftc
}

// Mutation returns the FrontendTemplateMutation object of the builder.
func (ftc *FrontendTemplateCreate) Mutation() *FrontendTemplateMutation {
	return ftc.mutation
}

// Save creates the FrontendTemplate in the database.
func (ftc *FrontendTemplateCreate) Save(ctx context.Context) (*FrontendTemplate, error) {
	var (
		err  error
		node *FrontendTemplate
	)
	if err := ftc.defaults(); err != nil {
		return nil, err
	}
	if len(ftc.hooks) == 0 {
		if err = ftc.check(); err != nil {
			return nil, err
		}
		node, err = ftc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontendTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftc.check(); err != nil {
				return nil, err
			}
			ftc.mutation = mutation
			if node, err = ftc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ftc.hooks) - 1; i >= 0; i-- {
			if ftc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ftc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FrontendTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FrontendTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FrontendTemplateCreate) SaveX(ctx context.Context) *FrontendTemplate {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftc *FrontendTemplateCreate) Exec(ctx context.Context) error {
	_, err := ftc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftc *FrontendTemplateCreate) ExecX(ctx context.Context) {
	if err := ftc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftc *FrontendTemplateCreate) defaults() error {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		if frontendtemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.DefaultCreatedAt()
		ftc.mutation.SetCreatedAt(v)
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		if frontendtemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.DefaultUpdatedAt()
		ftc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ftc.mutation.DeletedAt(); !ok {
		if frontendtemplate.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.DefaultDeletedAt()
		ftc.mutation.SetDeletedAt(v)
	}
	if _, ok := ftc.mutation.UsedFor(); !ok {
		v := frontendtemplate.DefaultUsedFor
		ftc.mutation.SetUsedFor(v)
	}
	if _, ok := ftc.mutation.Title(); !ok {
		v := frontendtemplate.DefaultTitle
		ftc.mutation.SetTitle(v)
	}
	if _, ok := ftc.mutation.Content(); !ok {
		v := frontendtemplate.DefaultContent
		ftc.mutation.SetContent(v)
	}
	if _, ok := ftc.mutation.Sender(); !ok {
		v := frontendtemplate.DefaultSender
		ftc.mutation.SetSender(v)
	}
	if _, ok := ftc.mutation.ID(); !ok {
		if frontendtemplate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.DefaultID (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.DefaultID()
		ftc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FrontendTemplateCreate) check() error {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FrontendTemplate.created_at"`)}
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FrontendTemplate.updated_at"`)}
	}
	if _, ok := ftc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FrontendTemplate.deleted_at"`)}
	}
	if _, ok := ftc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "FrontendTemplate.app_id"`)}
	}
	if _, ok := ftc.mutation.LangID(); !ok {
		return &ValidationError{Name: "lang_id", err: errors.New(`ent: missing required field "FrontendTemplate.lang_id"`)}
	}
	return nil
}

func (ftc *FrontendTemplateCreate) sqlSave(ctx context.Context) (*FrontendTemplate, error) {
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ftc *FrontendTemplateCreate) createSpec() (*FrontendTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &FrontendTemplate{config: ftc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: frontendtemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontendtemplate.FieldID,
			},
		}
	)
	_spec.OnConflict = ftc.conflict
	if id, ok := ftc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ftc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ftc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ftc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ftc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := ftc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := ftc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := ftc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ftc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ftc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldSender,
		})
		_node.Sender = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FrontendTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrontendTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ftc *FrontendTemplateCreate) OnConflict(opts ...sql.ConflictOption) *FrontendTemplateUpsertOne {
	ftc.conflict = opts
	return &FrontendTemplateUpsertOne{
		create: ftc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FrontendTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ftc *FrontendTemplateCreate) OnConflictColumns(columns ...string) *FrontendTemplateUpsertOne {
	ftc.conflict = append(ftc.conflict, sql.ConflictColumns(columns...))
	return &FrontendTemplateUpsertOne{
		create: ftc,
	}
}

type (
	// FrontendTemplateUpsertOne is the builder for "upsert"-ing
	//  one FrontendTemplate node.
	FrontendTemplateUpsertOne struct {
		create *FrontendTemplateCreate
	}

	// FrontendTemplateUpsert is the "OnConflict" setter.
	FrontendTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FrontendTemplateUpsert) SetCreatedAt(v uint32) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateCreatedAt() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FrontendTemplateUpsert) AddCreatedAt(v uint32) *FrontendTemplateUpsert {
	u.Add(frontendtemplate.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrontendTemplateUpsert) SetUpdatedAt(v uint32) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateUpdatedAt() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FrontendTemplateUpsert) AddUpdatedAt(v uint32) *FrontendTemplateUpsert {
	u.Add(frontendtemplate.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrontendTemplateUpsert) SetDeletedAt(v uint32) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateDeletedAt() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FrontendTemplateUpsert) AddDeletedAt(v uint32) *FrontendTemplateUpsert {
	u.Add(frontendtemplate.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *FrontendTemplateUpsert) SetAppID(v uuid.UUID) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateAppID() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *FrontendTemplateUpsert) SetLangID(v uuid.UUID) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateLangID() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldLangID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *FrontendTemplateUpsert) SetUsedFor(v string) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateUsedFor() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldUsedFor)
	return u
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *FrontendTemplateUpsert) ClearUsedFor() *FrontendTemplateUpsert {
	u.SetNull(frontendtemplate.FieldUsedFor)
	return u
}

// SetTitle sets the "title" field.
func (u *FrontendTemplateUpsert) SetTitle(v string) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateTitle() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *FrontendTemplateUpsert) ClearTitle() *FrontendTemplateUpsert {
	u.SetNull(frontendtemplate.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *FrontendTemplateUpsert) SetContent(v string) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateContent() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *FrontendTemplateUpsert) ClearContent() *FrontendTemplateUpsert {
	u.SetNull(frontendtemplate.FieldContent)
	return u
}

// SetSender sets the "sender" field.
func (u *FrontendTemplateUpsert) SetSender(v string) *FrontendTemplateUpsert {
	u.Set(frontendtemplate.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *FrontendTemplateUpsert) UpdateSender() *FrontendTemplateUpsert {
	u.SetExcluded(frontendtemplate.FieldSender)
	return u
}

// ClearSender clears the value of the "sender" field.
func (u *FrontendTemplateUpsert) ClearSender() *FrontendTemplateUpsert {
	u.SetNull(frontendtemplate.FieldSender)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FrontendTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frontendtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FrontendTemplateUpsertOne) UpdateNewValues() *FrontendTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(frontendtemplate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FrontendTemplate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FrontendTemplateUpsertOne) Ignore() *FrontendTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrontendTemplateUpsertOne) DoNothing() *FrontendTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrontendTemplateCreate.OnConflict
// documentation for more info.
func (u *FrontendTemplateUpsertOne) Update(set func(*FrontendTemplateUpsert)) *FrontendTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrontendTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FrontendTemplateUpsertOne) SetCreatedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FrontendTemplateUpsertOne) AddCreatedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateCreatedAt() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrontendTemplateUpsertOne) SetUpdatedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FrontendTemplateUpsertOne) AddUpdatedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateUpdatedAt() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrontendTemplateUpsertOne) SetDeletedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FrontendTemplateUpsertOne) AddDeletedAt(v uint32) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateDeletedAt() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *FrontendTemplateUpsertOne) SetAppID(v uuid.UUID) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateAppID() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *FrontendTemplateUpsertOne) SetLangID(v uuid.UUID) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateLangID() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *FrontendTemplateUpsertOne) SetUsedFor(v string) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateUsedFor() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *FrontendTemplateUpsertOne) ClearUsedFor() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearUsedFor()
	})
}

// SetTitle sets the "title" field.
func (u *FrontendTemplateUpsertOne) SetTitle(v string) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateTitle() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *FrontendTemplateUpsertOne) ClearTitle() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *FrontendTemplateUpsertOne) SetContent(v string) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateContent() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *FrontendTemplateUpsertOne) ClearContent() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearContent()
	})
}

// SetSender sets the "sender" field.
func (u *FrontendTemplateUpsertOne) SetSender(v string) *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *FrontendTemplateUpsertOne) UpdateSender() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateSender()
	})
}

// ClearSender clears the value of the "sender" field.
func (u *FrontendTemplateUpsertOne) ClearSender() *FrontendTemplateUpsertOne {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearSender()
	})
}

// Exec executes the query.
func (u *FrontendTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FrontendTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrontendTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FrontendTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FrontendTemplateUpsertOne.ID is not supported by MySQL driver. Use FrontendTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FrontendTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FrontendTemplateCreateBulk is the builder for creating many FrontendTemplate entities in bulk.
type FrontendTemplateCreateBulk struct {
	config
	builders []*FrontendTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the FrontendTemplate entities in the database.
func (ftcb *FrontendTemplateCreateBulk) Save(ctx context.Context) ([]*FrontendTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FrontendTemplate, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrontendTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ftcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FrontendTemplateCreateBulk) SaveX(ctx context.Context) []*FrontendTemplate {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftcb *FrontendTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ftcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcb *FrontendTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ftcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FrontendTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FrontendTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ftcb *FrontendTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *FrontendTemplateUpsertBulk {
	ftcb.conflict = opts
	return &FrontendTemplateUpsertBulk{
		create: ftcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FrontendTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ftcb *FrontendTemplateCreateBulk) OnConflictColumns(columns ...string) *FrontendTemplateUpsertBulk {
	ftcb.conflict = append(ftcb.conflict, sql.ConflictColumns(columns...))
	return &FrontendTemplateUpsertBulk{
		create: ftcb,
	}
}

// FrontendTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of FrontendTemplate nodes.
type FrontendTemplateUpsertBulk struct {
	create *FrontendTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FrontendTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(frontendtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FrontendTemplateUpsertBulk) UpdateNewValues() *FrontendTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(frontendtemplate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FrontendTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FrontendTemplateUpsertBulk) Ignore() *FrontendTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FrontendTemplateUpsertBulk) DoNothing() *FrontendTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FrontendTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *FrontendTemplateUpsertBulk) Update(set func(*FrontendTemplateUpsert)) *FrontendTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FrontendTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FrontendTemplateUpsertBulk) SetCreatedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FrontendTemplateUpsertBulk) AddCreatedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateCreatedAt() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FrontendTemplateUpsertBulk) SetUpdatedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FrontendTemplateUpsertBulk) AddUpdatedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateUpdatedAt() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FrontendTemplateUpsertBulk) SetDeletedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FrontendTemplateUpsertBulk) AddDeletedAt(v uint32) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateDeletedAt() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *FrontendTemplateUpsertBulk) SetAppID(v uuid.UUID) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateAppID() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *FrontendTemplateUpsertBulk) SetLangID(v uuid.UUID) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateLangID() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *FrontendTemplateUpsertBulk) SetUsedFor(v string) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateUsedFor() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateUsedFor()
	})
}

// ClearUsedFor clears the value of the "used_for" field.
func (u *FrontendTemplateUpsertBulk) ClearUsedFor() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearUsedFor()
	})
}

// SetTitle sets the "title" field.
func (u *FrontendTemplateUpsertBulk) SetTitle(v string) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateTitle() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *FrontendTemplateUpsertBulk) ClearTitle() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *FrontendTemplateUpsertBulk) SetContent(v string) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateContent() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *FrontendTemplateUpsertBulk) ClearContent() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearContent()
	})
}

// SetSender sets the "sender" field.
func (u *FrontendTemplateUpsertBulk) SetSender(v string) *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *FrontendTemplateUpsertBulk) UpdateSender() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.UpdateSender()
	})
}

// ClearSender clears the value of the "sender" field.
func (u *FrontendTemplateUpsertBulk) ClearSender() *FrontendTemplateUpsertBulk {
	return u.Update(func(s *FrontendTemplateUpsert) {
		s.ClearSender()
	})
}

// Exec executes the query.
func (u *FrontendTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FrontendTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FrontendTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FrontendTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
