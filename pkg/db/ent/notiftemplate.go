// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/notiftemplate"
	"github.com/google/uuid"
)

// NotifTemplate is the model entity for the NotifTemplate schema.
type NotifTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// UsedFor holds the value of the "used_for" field.
	UsedFor string `json:"used_for,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotifTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notiftemplate.FieldCreatedAt, notiftemplate.FieldUpdatedAt, notiftemplate.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case notiftemplate.FieldUsedFor, notiftemplate.FieldTitle, notiftemplate.FieldContent:
			values[i] = new(sql.NullString)
		case notiftemplate.FieldID, notiftemplate.FieldAppID, notiftemplate.FieldLangID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NotifTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotifTemplate fields.
func (nt *NotifTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notiftemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				nt.ID = *value
			}
		case notiftemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nt.CreatedAt = uint32(value.Int64)
			}
		case notiftemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nt.UpdatedAt = uint32(value.Int64)
			}
		case notiftemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				nt.DeletedAt = uint32(value.Int64)
			}
		case notiftemplate.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				nt.AppID = *value
			}
		case notiftemplate.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				nt.LangID = *value
			}
		case notiftemplate.FieldUsedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_for", values[i])
			} else if value.Valid {
				nt.UsedFor = value.String
			}
		case notiftemplate.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				nt.Title = value.String
			}
		case notiftemplate.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				nt.Content = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NotifTemplate.
// Note that you need to call NotifTemplate.Unwrap() before calling this method if this NotifTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NotifTemplate) Update() *NotifTemplateUpdateOne {
	return (&NotifTemplateClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NotifTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NotifTemplate) Unwrap() *NotifTemplate {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotifTemplate is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NotifTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("NotifTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", nt.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", nt.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", nt.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.AppID))
	builder.WriteString(", ")
	builder.WriteString("lang_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.LangID))
	builder.WriteString(", ")
	builder.WriteString("used_for=")
	builder.WriteString(nt.UsedFor)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(nt.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(nt.Content)
	builder.WriteByte(')')
	return builder.String()
}

// NotifTemplates is a parsable slice of NotifTemplate.
type NotifTemplates []*NotifTemplate

func (nt NotifTemplates) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
