// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/frontendtemplate"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FrontendTemplateUpdate is the builder for updating FrontendTemplate entities.
type FrontendTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *FrontendTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FrontendTemplateUpdate builder.
func (ftu *FrontendTemplateUpdate) Where(ps ...predicate.FrontendTemplate) *FrontendTemplateUpdate {
	ftu.mutation.Where(ps...)
	return ftu
}

// SetCreatedAt sets the "created_at" field.
func (ftu *FrontendTemplateUpdate) SetCreatedAt(u uint32) *FrontendTemplateUpdate {
	ftu.mutation.ResetCreatedAt()
	ftu.mutation.SetCreatedAt(u)
	return ftu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableCreatedAt(u *uint32) *FrontendTemplateUpdate {
	if u != nil {
		ftu.SetCreatedAt(*u)
	}
	return ftu
}

// AddCreatedAt adds u to the "created_at" field.
func (ftu *FrontendTemplateUpdate) AddCreatedAt(u int32) *FrontendTemplateUpdate {
	ftu.mutation.AddCreatedAt(u)
	return ftu
}

// SetUpdatedAt sets the "updated_at" field.
func (ftu *FrontendTemplateUpdate) SetUpdatedAt(u uint32) *FrontendTemplateUpdate {
	ftu.mutation.ResetUpdatedAt()
	ftu.mutation.SetUpdatedAt(u)
	return ftu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ftu *FrontendTemplateUpdate) AddUpdatedAt(u int32) *FrontendTemplateUpdate {
	ftu.mutation.AddUpdatedAt(u)
	return ftu
}

// SetDeletedAt sets the "deleted_at" field.
func (ftu *FrontendTemplateUpdate) SetDeletedAt(u uint32) *FrontendTemplateUpdate {
	ftu.mutation.ResetDeletedAt()
	ftu.mutation.SetDeletedAt(u)
	return ftu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableDeletedAt(u *uint32) *FrontendTemplateUpdate {
	if u != nil {
		ftu.SetDeletedAt(*u)
	}
	return ftu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ftu *FrontendTemplateUpdate) AddDeletedAt(u int32) *FrontendTemplateUpdate {
	ftu.mutation.AddDeletedAt(u)
	return ftu
}

// SetAppID sets the "app_id" field.
func (ftu *FrontendTemplateUpdate) SetAppID(u uuid.UUID) *FrontendTemplateUpdate {
	ftu.mutation.SetAppID(u)
	return ftu
}

// SetLangID sets the "lang_id" field.
func (ftu *FrontendTemplateUpdate) SetLangID(u uuid.UUID) *FrontendTemplateUpdate {
	ftu.mutation.SetLangID(u)
	return ftu
}

// SetUsedFor sets the "used_for" field.
func (ftu *FrontendTemplateUpdate) SetUsedFor(s string) *FrontendTemplateUpdate {
	ftu.mutation.SetUsedFor(s)
	return ftu
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableUsedFor(s *string) *FrontendTemplateUpdate {
	if s != nil {
		ftu.SetUsedFor(*s)
	}
	return ftu
}

// ClearUsedFor clears the value of the "used_for" field.
func (ftu *FrontendTemplateUpdate) ClearUsedFor() *FrontendTemplateUpdate {
	ftu.mutation.ClearUsedFor()
	return ftu
}

// SetTitle sets the "title" field.
func (ftu *FrontendTemplateUpdate) SetTitle(s string) *FrontendTemplateUpdate {
	ftu.mutation.SetTitle(s)
	return ftu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableTitle(s *string) *FrontendTemplateUpdate {
	if s != nil {
		ftu.SetTitle(*s)
	}
	return ftu
}

// ClearTitle clears the value of the "title" field.
func (ftu *FrontendTemplateUpdate) ClearTitle() *FrontendTemplateUpdate {
	ftu.mutation.ClearTitle()
	return ftu
}

// SetContent sets the "content" field.
func (ftu *FrontendTemplateUpdate) SetContent(s string) *FrontendTemplateUpdate {
	ftu.mutation.SetContent(s)
	return ftu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableContent(s *string) *FrontendTemplateUpdate {
	if s != nil {
		ftu.SetContent(*s)
	}
	return ftu
}

// ClearContent clears the value of the "content" field.
func (ftu *FrontendTemplateUpdate) ClearContent() *FrontendTemplateUpdate {
	ftu.mutation.ClearContent()
	return ftu
}

// SetSender sets the "sender" field.
func (ftu *FrontendTemplateUpdate) SetSender(s string) *FrontendTemplateUpdate {
	ftu.mutation.SetSender(s)
	return ftu
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (ftu *FrontendTemplateUpdate) SetNillableSender(s *string) *FrontendTemplateUpdate {
	if s != nil {
		ftu.SetSender(*s)
	}
	return ftu
}

// ClearSender clears the value of the "sender" field.
func (ftu *FrontendTemplateUpdate) ClearSender() *FrontendTemplateUpdate {
	ftu.mutation.ClearSender()
	return ftu
}

// Mutation returns the FrontendTemplateMutation object of the builder.
func (ftu *FrontendTemplateUpdate) Mutation() *FrontendTemplateMutation {
	return ftu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FrontendTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ftu.defaults(); err != nil {
		return 0, err
	}
	if len(ftu.hooks) == 0 {
		affected, err = ftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontendTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ftu.mutation = mutation
			affected, err = ftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ftu.hooks) - 1; i >= 0; i-- {
			if ftu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FrontendTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FrontendTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FrontendTemplateUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftu *FrontendTemplateUpdate) defaults() error {
	if _, ok := ftu.mutation.UpdatedAt(); !ok {
		if frontendtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.UpdateDefaultUpdatedAt()
		ftu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftu *FrontendTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FrontendTemplateUpdate {
	ftu.modifiers = append(ftu.modifiers, modifiers...)
	return ftu
}

func (ftu *FrontendTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frontendtemplate.Table,
			Columns: frontendtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontendtemplate.FieldID,
			},
		},
	}
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldCreatedAt,
		})
	}
	if value, ok := ftu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldCreatedAt,
		})
	}
	if value, ok := ftu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ftu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ftu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldDeletedAt,
		})
	}
	if value, ok := ftu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldDeletedAt,
		})
	}
	if value, ok := ftu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldAppID,
		})
	}
	if value, ok := ftu.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldLangID,
		})
	}
	if value, ok := ftu.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldUsedFor,
		})
	}
	if ftu.mutation.UsedForCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldUsedFor,
		})
	}
	if value, ok := ftu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldTitle,
		})
	}
	if ftu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldTitle,
		})
	}
	if value, ok := ftu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldContent,
		})
	}
	if ftu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldContent,
		})
	}
	if value, ok := ftu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldSender,
		})
	}
	if ftu.mutation.SenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldSender,
		})
	}
	_spec.Modifiers = ftu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frontendtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FrontendTemplateUpdateOne is the builder for updating a single FrontendTemplate entity.
type FrontendTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FrontendTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ftuo *FrontendTemplateUpdateOne) SetCreatedAt(u uint32) *FrontendTemplateUpdateOne {
	ftuo.mutation.ResetCreatedAt()
	ftuo.mutation.SetCreatedAt(u)
	return ftuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableCreatedAt(u *uint32) *FrontendTemplateUpdateOne {
	if u != nil {
		ftuo.SetCreatedAt(*u)
	}
	return ftuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ftuo *FrontendTemplateUpdateOne) AddCreatedAt(u int32) *FrontendTemplateUpdateOne {
	ftuo.mutation.AddCreatedAt(u)
	return ftuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ftuo *FrontendTemplateUpdateOne) SetUpdatedAt(u uint32) *FrontendTemplateUpdateOne {
	ftuo.mutation.ResetUpdatedAt()
	ftuo.mutation.SetUpdatedAt(u)
	return ftuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ftuo *FrontendTemplateUpdateOne) AddUpdatedAt(u int32) *FrontendTemplateUpdateOne {
	ftuo.mutation.AddUpdatedAt(u)
	return ftuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ftuo *FrontendTemplateUpdateOne) SetDeletedAt(u uint32) *FrontendTemplateUpdateOne {
	ftuo.mutation.ResetDeletedAt()
	ftuo.mutation.SetDeletedAt(u)
	return ftuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableDeletedAt(u *uint32) *FrontendTemplateUpdateOne {
	if u != nil {
		ftuo.SetDeletedAt(*u)
	}
	return ftuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ftuo *FrontendTemplateUpdateOne) AddDeletedAt(u int32) *FrontendTemplateUpdateOne {
	ftuo.mutation.AddDeletedAt(u)
	return ftuo
}

// SetAppID sets the "app_id" field.
func (ftuo *FrontendTemplateUpdateOne) SetAppID(u uuid.UUID) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetAppID(u)
	return ftuo
}

// SetLangID sets the "lang_id" field.
func (ftuo *FrontendTemplateUpdateOne) SetLangID(u uuid.UUID) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetLangID(u)
	return ftuo
}

// SetUsedFor sets the "used_for" field.
func (ftuo *FrontendTemplateUpdateOne) SetUsedFor(s string) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetUsedFor(s)
	return ftuo
}

// SetNillableUsedFor sets the "used_for" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableUsedFor(s *string) *FrontendTemplateUpdateOne {
	if s != nil {
		ftuo.SetUsedFor(*s)
	}
	return ftuo
}

// ClearUsedFor clears the value of the "used_for" field.
func (ftuo *FrontendTemplateUpdateOne) ClearUsedFor() *FrontendTemplateUpdateOne {
	ftuo.mutation.ClearUsedFor()
	return ftuo
}

// SetTitle sets the "title" field.
func (ftuo *FrontendTemplateUpdateOne) SetTitle(s string) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetTitle(s)
	return ftuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableTitle(s *string) *FrontendTemplateUpdateOne {
	if s != nil {
		ftuo.SetTitle(*s)
	}
	return ftuo
}

// ClearTitle clears the value of the "title" field.
func (ftuo *FrontendTemplateUpdateOne) ClearTitle() *FrontendTemplateUpdateOne {
	ftuo.mutation.ClearTitle()
	return ftuo
}

// SetContent sets the "content" field.
func (ftuo *FrontendTemplateUpdateOne) SetContent(s string) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetContent(s)
	return ftuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableContent(s *string) *FrontendTemplateUpdateOne {
	if s != nil {
		ftuo.SetContent(*s)
	}
	return ftuo
}

// ClearContent clears the value of the "content" field.
func (ftuo *FrontendTemplateUpdateOne) ClearContent() *FrontendTemplateUpdateOne {
	ftuo.mutation.ClearContent()
	return ftuo
}

// SetSender sets the "sender" field.
func (ftuo *FrontendTemplateUpdateOne) SetSender(s string) *FrontendTemplateUpdateOne {
	ftuo.mutation.SetSender(s)
	return ftuo
}

// SetNillableSender sets the "sender" field if the given value is not nil.
func (ftuo *FrontendTemplateUpdateOne) SetNillableSender(s *string) *FrontendTemplateUpdateOne {
	if s != nil {
		ftuo.SetSender(*s)
	}
	return ftuo
}

// ClearSender clears the value of the "sender" field.
func (ftuo *FrontendTemplateUpdateOne) ClearSender() *FrontendTemplateUpdateOne {
	ftuo.mutation.ClearSender()
	return ftuo
}

// Mutation returns the FrontendTemplateMutation object of the builder.
func (ftuo *FrontendTemplateUpdateOne) Mutation() *FrontendTemplateMutation {
	return ftuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftuo *FrontendTemplateUpdateOne) Select(field string, fields ...string) *FrontendTemplateUpdateOne {
	ftuo.fields = append([]string{field}, fields...)
	return ftuo
}

// Save executes the query and returns the updated FrontendTemplate entity.
func (ftuo *FrontendTemplateUpdateOne) Save(ctx context.Context) (*FrontendTemplate, error) {
	var (
		err  error
		node *FrontendTemplate
	)
	if err := ftuo.defaults(); err != nil {
		return nil, err
	}
	if len(ftuo.hooks) == 0 {
		node, err = ftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FrontendTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ftuo.mutation = mutation
			node, err = ftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftuo.hooks) - 1; i >= 0; i-- {
			if ftuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ftuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FrontendTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FrontendTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FrontendTemplateUpdateOne) SaveX(ctx context.Context) *FrontendTemplate {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FrontendTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FrontendTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftuo *FrontendTemplateUpdateOne) defaults() error {
	if _, ok := ftuo.mutation.UpdatedAt(); !ok {
		if frontendtemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized frontendtemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := frontendtemplate.UpdateDefaultUpdatedAt()
		ftuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ftuo *FrontendTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FrontendTemplateUpdateOne {
	ftuo.modifiers = append(ftuo.modifiers, modifiers...)
	return ftuo
}

func (ftuo *FrontendTemplateUpdateOne) sqlSave(ctx context.Context) (_node *FrontendTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   frontendtemplate.Table,
			Columns: frontendtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: frontendtemplate.FieldID,
			},
		},
	}
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FrontendTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, frontendtemplate.FieldID)
		for _, f := range fields {
			if !frontendtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != frontendtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldCreatedAt,
		})
	}
	if value, ok := ftuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldCreatedAt,
		})
	}
	if value, ok := ftuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ftuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ftuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldDeletedAt,
		})
	}
	if value, ok := ftuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: frontendtemplate.FieldDeletedAt,
		})
	}
	if value, ok := ftuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldAppID,
		})
	}
	if value, ok := ftuo.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: frontendtemplate.FieldLangID,
		})
	}
	if value, ok := ftuo.mutation.UsedFor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldUsedFor,
		})
	}
	if ftuo.mutation.UsedForCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldUsedFor,
		})
	}
	if value, ok := ftuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldTitle,
		})
	}
	if ftuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldTitle,
		})
	}
	if value, ok := ftuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldContent,
		})
	}
	if ftuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldContent,
		})
	}
	if value, ok := ftuo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: frontendtemplate.FieldSender,
		})
	}
	if ftuo.mutation.SenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: frontendtemplate.FieldSender,
		})
	}
	_spec.Modifiers = ftuo.modifiers
	_node = &FrontendTemplate{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frontendtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
