// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-manager/pkg/db/ent/frontendtemplate"
	"github.com/google/uuid"
)

// FrontendTemplate is the model entity for the FrontendTemplate schema.
type FrontendTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// UsedFor holds the value of the "used_for" field.
	UsedFor string `json:"used_for,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Sender holds the value of the "sender" field.
	Sender string `json:"sender,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrontendTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case frontendtemplate.FieldCreatedAt, frontendtemplate.FieldUpdatedAt, frontendtemplate.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case frontendtemplate.FieldUsedFor, frontendtemplate.FieldTitle, frontendtemplate.FieldContent, frontendtemplate.FieldSender:
			values[i] = new(sql.NullString)
		case frontendtemplate.FieldID, frontendtemplate.FieldAppID, frontendtemplate.FieldLangID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FrontendTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrontendTemplate fields.
func (ft *FrontendTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case frontendtemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ft.ID = *value
			}
		case frontendtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = uint32(value.Int64)
			}
		case frontendtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = uint32(value.Int64)
			}
		case frontendtemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ft.DeletedAt = uint32(value.Int64)
			}
		case frontendtemplate.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ft.AppID = *value
			}
		case frontendtemplate.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				ft.LangID = *value
			}
		case frontendtemplate.FieldUsedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_for", values[i])
			} else if value.Valid {
				ft.UsedFor = value.String
			}
		case frontendtemplate.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ft.Title = value.String
			}
		case frontendtemplate.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ft.Content = value.String
			}
		case frontendtemplate.FieldSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender", values[i])
			} else if value.Valid {
				ft.Sender = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FrontendTemplate.
// Note that you need to call FrontendTemplate.Unwrap() before calling this method if this FrontendTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FrontendTemplate) Update() *FrontendTemplateUpdateOne {
	return (&FrontendTemplateClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the FrontendTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FrontendTemplate) Unwrap() *FrontendTemplate {
	_tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FrontendTemplate is not a transactional entity")
	}
	ft.config.driver = _tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FrontendTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("FrontendTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ft.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ft.AppID))
	builder.WriteString(", ")
	builder.WriteString("lang_id=")
	builder.WriteString(fmt.Sprintf("%v", ft.LangID))
	builder.WriteString(", ")
	builder.WriteString("used_for=")
	builder.WriteString(ft.UsedFor)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ft.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ft.Content)
	builder.WriteString(", ")
	builder.WriteString("sender=")
	builder.WriteString(ft.Sender)
	builder.WriteByte(')')
	return builder.String()
}

// FrontendTemplates is a parsable slice of FrontendTemplate.
type FrontendTemplates []*FrontendTemplate

func (ft FrontendTemplates) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}
